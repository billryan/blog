<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>东海一叶</title>
    <link>https://blog.yuanbin.me/</link>
    <description>Recent content on 东海一叶</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 07 Mar 2020 10:29:31 +0800</lastBuildDate>
    
        <atom:link href="https://blog.yuanbin.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>业务搜索之 Elasticsearch 使用实践</title>
      <link>https://blog.yuanbin.me/posts/2020-03/2020-03-07_10-29-31/</link>
      <pubDate>Sat, 07 Mar 2020 10:29:31 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-03/2020-03-07_10-29-31/</guid>
      
        <description>&lt;p&gt;得益于 Elasticsearch 对 Lucene 恰到好处的功能增强和丰富的文档，业务搜索/检索场景使用 Elasticsearch(ES) 越来越普遍。本文主要对自己在业务搜索场景中对 ES 的使用实践做一些总结，ES 一些基础如倒排索引、index 基础概念和 kibana dev tools 工具等不在本文讨论范围内。&lt;/p&gt;
&lt;h2 id=&#34;index-alias-&#34;&gt;index alias 使用优化&lt;/h2&gt;
&lt;p&gt;ES 原生提供了 index 这种和 MySQL 中 table 对等的概念，随着业务和需求的变化，对原 index 部分字段类型的增改在所难免。得益于 ES 的列式存储特性，新增字段是非常容易的，但是要修改则不可以，除非新建索引。那么问题来了，由于需求等多方因素影响，确实需要新建索引达到修改原索引字段类型的目的，这时业务就需要将读写流量切换到新索引了。&lt;/p&gt;
&lt;p&gt;我们顺藤摸瓜再进一步分析可以知道，在这个流量切换过程中，如何在保证数据一致性的前提下避免线上业务故障呢？为了解决这类问题，ES 官方提供了最佳实践之 &lt;a href=&#34;https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime&#34; title=&#34;零宕机修改 mapping&#34;&gt;零宕机修改 mapping&lt;/a&gt;, 核心是 ES 提供了一种和视图类似的「alias(别名)」机制，并且在切换 alias 指向实际的索引时可以保证原子性。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-aliases.html&#34; title=&#34;indices aliases&#34;&gt;indices aliases&lt;/a&gt; 阐述了如何具体操作。这里需要注意的一个细节是如果使用 ES 提供的 reindex 方法，在超大索引重建时，新数据仍然在继续写入，那么这个时候盲目切换索引是会丢数据的，比较精确的方式是在写入 ES 时双写，全部重建后再切换 alias, 这种双写场景需要良好的工具支持，后续我再专文说明。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建索引时，同时建立对应的 alias, 索引名可以在 alias 后面加入 &lt;code&gt;-v1&lt;/code&gt; 标记。对业务使用 index 时可以对外仅暴露不变的 alias, 避免业务代码改动，屏蔽底层索引优化切换细节。&lt;/li&gt;
&lt;li&gt;日志类数据考虑按天建立索引，使用 &lt;a href=&#34;https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-templates.html&#34; title=&#34;索引模板&#34;&gt;索引模板&lt;/a&gt;/&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/indices-templates.html&#34; title=&#34;indices templates&#34;&gt;indices templates&lt;/a&gt; 可以让日志类数据按天自动创建索引，减轻人工维护负担。&lt;/li&gt;
&lt;li&gt;多个物理索引并且需要通过 alias 写入的场景，可以考虑使用 Write Alias 在多个索引中指定一个为 &lt;code&gt;write_alias&lt;/code&gt;, alias type 的需求细节可以参考 &lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/30061&#34; title=&#34;Alias types issue&#34;&gt;Alias types issue&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading&#34;&gt;分片数&lt;/h2&gt;
&lt;p&gt;对于小的业务，一个主分片一个副本分片就够了，然后根据节点数提高副本分片从而提升读性能。对于大的业务量，一般来说总的分片数和集群所有节点数保持一致或者整数倍为佳，压力均摊。关于分片数设置，ES 官方博客的 &lt;a href=&#34;https://www.elastic.co/cn/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster&#34; title=&#34;分片数设置&#34;&gt;分片数设置&lt;/a&gt; 也有说明，根据你节点的磁盘特点，机械/SSD, 业务特点，业务检索/日志类 略有不同，业务检索类可以适当控制分片体积，过大过小都不好，最佳的方案是自己做业务压测，满足要求为止。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;分片自动均衡&lt;/h2&gt;
&lt;p&gt;对于变动不大的业务场景，可以考虑关闭分片自动均衡，防止在节点增删时触发分片自适应调整，占用集群资源进而影响线上业务。可以参考 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/shards-allocation.html&#34; title=&#34;shards allocation&#34;&gt;shards allocation&lt;/a&gt; 了解更多细节。&lt;/p&gt;
&lt;h2 id=&#34;mapping-schema-&#34;&gt;mapping schema 优化&lt;/h2&gt;
&lt;p&gt;设置 mapping 时，选择合适的类型是十分重要的，好马配好鞍，好的算法配合适当的数据结构才能绽放出最耀眼的光芒。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线上业务明确类型，mapping 字段类型自己维护，设置 &lt;code&gt;&amp;quot;dynamic&amp;quot;: &amp;quot;false&amp;quot;&lt;/code&gt;. 不要图方便让 ES 自动建类型，后期性能啥的是个大坑。&lt;/li&gt;
&lt;li&gt;不要再自作聪明搞 &lt;code&gt;type&lt;/code&gt; 了，属于滥用，已经明确被抛弃了&lt;/li&gt;
&lt;li&gt;对于明确不需要倒排索引的就禁用好了，&lt;code&gt;&amp;quot;enabled&amp;quot;: false&lt;/code&gt;, 细节参考 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/enabled.html#enabled&#34; title=&#34;ES enabled&#34;&gt;ES enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;枚举类型字段使用 &lt;code&gt;keyword&lt;/code&gt;, 哪怕本身是 integer, 量大的时候对 term query 能有好几倍的延时优化. 最近的 ES 采用了 Lucene 新版本中对 Number 的底层优化，使用了更适合排序而不是原始的倒排索引。更极致的优化是根据不同的枚举值建立不同的索引，这个要看业务场景。想了解 keyword 优化细节的同学可以参考 &lt;a href=&#34;https://elasticsearch.cn/article/446&#34; title=&#34;ES keyword 优化&#34;&gt;ES keyword 优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要同时支持好几种不同应用场景的，如排序和倒排场景，考虑使用 subfields&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nested-query-&#34;&gt;nested query 优化&lt;/h2&gt;
&lt;p&gt;能避免就避免，是性能杀手。如果一定要用，其实可以考虑对部分场景如某个字段枚举值不多，那么直接以值作为字段名的一部分，进而化解原本 nested query 才能满足的查询场景。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;其他&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;慢查询监控，对部分延时较大的语句针对性优化&lt;/li&gt;
&lt;li&gt;上线预热，部分索引切换场景时考虑先预热再进行线上服务，减少线上超时&lt;/li&gt;
&lt;li&gt;能用 filter 就用 filter, 可以充分利用缓存&lt;/li&gt;
&lt;li&gt;尽量少用 script 这些&lt;/li&gt;
&lt;li&gt;预处理生成索引代替实时计算&lt;/li&gt;
&lt;li&gt;遇到性能问题时可以到 profile 看看每一个过程的耗时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他的想到再补吧，index, mapping 常用的差不多就这些了&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>谈谈校招/社招技术简历/面试这件事</title>
      <link>https://blog.yuanbin.me/posts/2020-02/2020-02-28_12-20-41/</link>
      <pubDate>Fri, 28 Feb 2020 12:20:42 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-02/2020-02-28_12-20-41/</guid>
      
        <description>&lt;p&gt;传统上，每年的金三银四是社招跳槽的好时节，大部分公司年终奖此时都已经发了，流动性比较好，招聘人头数 (HC) 放出来的往往也较多。对于大部分普通人来说，准备好简历和面试是第一步，面试结果的好坏与你前期的积累息息相关。而要想拿到大厂的面试资格，简历自然是第一道关，一封好的简历有利于你从 HR 眼中脱颖而出，也有利于面试的顺利展开。下面聊聊自己从毕业到工作近四年来的找工作感悟。&lt;/p&gt;
&lt;p&gt;自己从 2016 年 3 月毕业到现在已近四年，前后经历了四家公司，IBM(2016) ==&amp;gt; 银科控股(2017~2019) ==&amp;gt; 饿了么(2019) ==&amp;gt; 字节跳动(2019)，可以看到这四年的经历可以说是非常「丰富」了。当然如果从另一个角度解读，你也可以理解为这是职业生涯中一段比较失败的经历，不断在赶路似乎又没找到出路。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;校招简历/面试准备&lt;/h2&gt;
&lt;p&gt;回想自己 2016 年那会硕士毕业，简历真是一片空白，研究生阶段在实验室里研究的都是无线网络协议和仿真，选修课选修了一些统计学习和机器学习类的课程，算是对机器学习有了一些皮毛的理解。可想而知，这样的经历去找计算机类的工作简历上可以说是一片空白。当年实习投给七牛、爱奇艺等公司的简历都直接被当垃圾忽略掉了&amp;hellip; 如果觉得自己对计算机工程领域还算有兴趣，根据我自己找工作的血泪史来看，可以做一些如下准备：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找工作过两三年或以上的学长/朋友了解下市场，看看公司到底需要什么样的人，以及对应岗位所需要的知识储备。&lt;/li&gt;
&lt;li&gt;在深入调研和多方了解后明确一个方向，多积累相关上下游知识点，不要广撒网，以大多数人，尤其是跨专业找工作的人来说，精力是十分有限的。&lt;/li&gt;
&lt;li&gt;简历中着重体现自己的贡献和工作，以及和相关岗位的匹配度，对于技术简历照片一般是不需要的。&lt;/li&gt;
&lt;li&gt;没有计算机相关项目经历的可以去抱抱大腿混点项目比赛经历，也可以扩大自己的知识面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;形而下一点的实际操作建议就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复习下计算机基础知识，数据结构与算法、操作系统、网络和数据库，常见的系统设计，组件选型的优缺点分析。字节跳动面试几乎必问基础算法题，其实也可以认为是常见的代码题，一般不难。&lt;/li&gt;
&lt;li&gt;熟悉你用的主力语言，不要摇摆不定，选定一种走下去，比如 C++/Java, 基础的语言特性要十分熟悉，比如阿里几乎必问 Java 语言细节和 JVM，腾讯相对喜欢问 C++ 多一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你实在没有什么突出的项目经历，那就把基本功练好，可以是语言，算法，常见系统设计，常用中间件原理和源码分析。面试中能有两三个亮点就能惊艳到面试官了。&lt;/p&gt;
&lt;p&gt;对于一些知名公司如 Google/Facebook 等校招宣讲会，建议一定要去现场感受下这些公司的工作氛围，公司文化，面试流程等。有些学长/学姐还会带来一些对找工作有帮助的干货。现在让我还印象深刻的是一名来自 Facebook 的小哥对写简历的分享，下面总结浓缩一下。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;怎样写好简历&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;简历应该包含什么&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;个人信息
&lt;ol&gt;
&lt;li&gt;学校/学位/毕业时间(方便 HR 知道你何时毕业筛选简历)，GPA 最好能附上权重和高排名，不同的学校 GPA 总分不一样&lt;/li&gt;
&lt;li&gt;联系电话/邮箱&lt;/li&gt;
&lt;li&gt;GitHub/blog/linkedin&lt;/li&gt;
&lt;li&gt;不需要照片&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;项目经历
&lt;ol&gt;
&lt;li&gt;有一定含金量的工业界经历（实习/全职/比赛）&lt;/li&gt;
&lt;li&gt;一些有趣的项目，你能聊开的那种&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;自我简介
&lt;ol&gt;
&lt;li&gt;简要说明自己的优点&lt;/li&gt;
&lt;li&gt;技能点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面讲讲什么样的简历才是好简历，坦白说，简历上再多的文字修饰都比不上你真实的经历，你的思考和你的成长。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关注你做了什么，而不是罗列是什么&lt;/li&gt;
&lt;li&gt;关注产出和价值，最好是能有数字和量化指标衡量，给人感觉踏实靠谱&lt;/li&gt;
&lt;li&gt;提供客观数据，具体且简短，多使用动词如『优化』、『提高』等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于如何才能写出更好的技术简历，左耳朵耗子的专栏文章就写的非常好，精炼。具体可参考 &lt;a href=&#34;https://time.geekbang.org/column/article/13067&#34; title=&#34;程序员面试攻略：面试前的准备&#34;&gt;程序员面试攻略：面试前的准备&lt;/a&gt; 由于是付费专栏，你可以自行付费，也可以选择关注公众号在后台留言，我可以从极客专栏中分享给你免费阅读。如果觉得左耳朵耗子的过于简短，也可以去读读 Gayle 的大作《金领简历》 提到 Gayle, 不得不说她的另外一本神作《程序员面试金典》，国外已经第六版了。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;如何面试&lt;/h2&gt;
&lt;p&gt;如果你面试机会非常少，不妨多投投简历找些小公司练练手，或者做一些模拟面试。我之前给一位学弟做过长达几小时的模拟面试，在一些细节上稍微给了一些建议，他最后如愿拿到了字节跳动的好工作机会。总的来说，你需要在代码面试（字节跳动和国外公司面试中常有）中体现如下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和面试官沟通确认问题，达成一致，有没有哪方面的限制&lt;/li&gt;
&lt;li&gt;如何思考并解决技术问题的，如果可能，也可以画图辅助分析&lt;/li&gt;
&lt;li&gt;如何做工程上的权衡（时间/空间/效率），和面试官沟通复杂度分析&lt;/li&gt;
&lt;li&gt;先让代码跑起来，并同时考虑边界条件，再逐步迭代 Done is better than perfect&lt;/li&gt;
&lt;li&gt;如果实在没有思路，可以先说说自己见解，然后让面试官给点提示&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;如何在面试中讨论项目&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;context: 简要描述项目背景，为什么要做，意义和影响何在。让面试官快速了解。&lt;/li&gt;
&lt;li&gt;action: 你在这个项目中做了什么，贡献是什么。&lt;/li&gt;
&lt;li&gt;result: 项目的结果，失败的项目也可以讲，在这个项目中学到了什么，得到了什么样的成长。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简历中提到的技术一定要熟悉，站在面试官的角度问自己会问自己什么问题。&lt;/p&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;广告&lt;/h2&gt;
&lt;p&gt;有需要内推字节跳动的社招/校招都可以找我，校招内推码: &lt;strong&gt;QYVDPPA&lt;/strong&gt; 全球都可以，只要招聘网站 &lt;a href=&#34;https://job.bytedance.com/&#34; title=&#34;字节跳动职位 JD 链接&#34;&gt;字节跳动职位 JD 链接&lt;/a&gt; 上有，简历可以发我邮箱 &lt;a href=&#34;mailto:yuanbin.me@bytedance.com&#34;&gt;yuanbin.me@bytedance.com&lt;/a&gt;. 有需要的话，我可以对简历给出反馈更改意见，提高成功率。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>搜索/推荐工程之实时 CDC 数据流</title>
      <link>https://blog.yuanbin.me/posts/2020-02/2020-02-28_00-19-24/</link>
      <pubDate>Fri, 28 Feb 2020 00:19:25 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-02/2020-02-28_00-19-24/</guid>
      
        <description>&lt;p&gt;本篇是『搜索/推荐工程』系列文章的第一篇，整个系列大致会围绕搜索和推荐工程中数据的产生、处理、迁移同步和应用展开，本篇主要阐述数据产生和迁移同步这两个环节。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;背景及需求分析&lt;/h2&gt;
&lt;p&gt;对于搜索和推荐来说，没有数据就像是无源之水无本之木，而这里面的数据又可以粗略分为两大类：业务数据和行为数据。行为数据通常走 Kafka 这种 MQ，业务数据则通常走 MySQL 这种关系型数据库，对于搜索来说，通常是基于开源的 ElasticSearch(ES) 这种专业引擎进行业务开发。那么问题来了，这里涉及到三种不同的存储系统，而搜索又比较依赖前两者，寄希望于业务开发双写 DB 和 ES，较不现实，因为对于大部分团队来说，业务开发和搜索/推荐往往是两大团队，另外双写需要处理 ES 写失败等场景，同时 ES 的一些优化不可能总是去改业务代码，这些都给业务端快速迭代造成了不小的障碍。&lt;/p&gt;
&lt;p&gt;考虑到搜索推荐的实际业务场景，一般都不需要强一致性保证，而且延时在秒级是可以接受的。那么根据这个特点，很自然地就能联想到可以通过 DB 的 binlog 和 MQ，构建一套异步实时处理系统来保证不同存储间的最终一致性，并且这种延时通常可以控制在秒级，对搜索推荐场景的时效性是足够了。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;搜索/推荐数据流架构设计&lt;/h2&gt;
&lt;p&gt;这里以典型的 MySQL 和 Kafka 为例对数据流进行说明，下面的架构图基于我和团队从 0 到 1 构建某互联网金融 APP 的搜索/推荐架构图做了适当增改而来，其中包含了数据链路中的产生、处理、分发和存储的全过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2020/202002/search-rec-dataflow.png&#34; alt=&#34;搜索/推荐数据流架构图&#34; title=&#34;搜索/推荐数据流架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面我将围绕架构图来逐一说明组件选型细节。&lt;/p&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;数据采集&lt;/h3&gt;
&lt;p&gt;从最底层数据采集逐个往上说起，业务数据一般由业务开发团队开发并维护，比如用户的基本信息，购买/收藏/互动的产品信息等，这类数据一般维护在关系型数据库中，比如 MySQL，结构化比较强，读取使用比较方便。行为数据一般是一些类似点击，滑动，关闭等行为，这类数据往往需要前后端一起埋点，由于与用户行为息息相关，前端如 Web/iOS/Android 这类的埋点工作相对多一些。&lt;/p&gt;
&lt;p&gt;对于埋点/打点的工具，有些会选择通过后端提供 HTTP 接口发送埋点数据，有些则直接通过 Kafka async producer 这类对后端友好的方式发送。考虑到各端开发成本和数据字典沟通成本，我建议所有开发团队使用专业的的埋点 SDK，给业务开发和后续数据对接打下良好的基础。前期数据生产不规范，后期使用起来要人命。目前国内较为专业的埋点 SDK 有提供 SAAS 服务的神策分析，也有专注于日志采集的阿里云日志服务(&lt;a href=&#34;https://help.aliyun.com/document_detail/28981.html?spm=a2c4g.11186623.6.586.793c3479gB3SaO&#34; title=&#34;SLS&#34;&gt;SLS&lt;/a&gt;), 这两大产品均有专业的埋点 SDK，能覆盖几乎所有主流语言。对于神策来说，他们家提供的远不止埋点 SDK，提供的实际上是整条数据链路，直至最后的分析和使用。如果真的需要自研埋点 SDK，我相信神策和阿里云的这些 SDK 实现是一个比较好的参考。&lt;/p&gt;
&lt;h3 id=&#34;binlog-&#34;&gt;binlog 事件流&lt;/h3&gt;
&lt;p&gt;随着互联网业务的蓬勃发展，可以看到如今的一个趋势是实时流处理越来越大行其道，越来越多的一个需求是将数据库中的数据变更同时以流的形式向外推送，于是乎基于 binlog 的流式方案也是越来越多，功能也越来越强。就我所用过的两个工业级别的 binlog 流式工具来说，一个是国内阿里的 &lt;a href=&#34;https://github.com/alibaba/canal&#34; title=&#34;canal&#34;&gt;canal&lt;/a&gt;, canal 最近几年更新也比较多，功能也多了起来，比如直接写 Kafka/Elasticsearch. 另一个则是 &lt;a href=&#34;http://maxwells-daemon.io/&#34; title=&#34;maxwell&#34;&gt;maxwell&lt;/a&gt;, 将 binlog 转换为 JSON, 并可以自行配置输出 Kafka 等 MQ。曾经为了同步到 Elasticsearch 还短暂用过的还有 siddontang 的 &lt;a href=&#34;https://github.com/siddontang/go-mysql-elasticsearch&#34; title=&#34;go-mysql-elasticsearch&#34;&gt;go-mysql-elasticsearch&lt;/a&gt;. 下面简单说说这几款工具的优缺点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;canal: 总的来讲使用这个方案问题不大。
&lt;ol&gt;
&lt;li&gt;优点: 国内阿里程序员主导开发，国人熟悉，使用也很广，文档还行。&lt;/li&gt;
&lt;li&gt;缺点: 协议还是略显复杂，安装使用起来稍显麻烦，直接写 Kafka 等方案还需要进一步完善。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;maxwell: 个人偏好这个
&lt;ol&gt;
&lt;li&gt;优点：国外 zendesk 开源，项目代码质量不错，官网文档清晰，配置灵活，同时对于直接写 Kafka 的话运行起来很简单，输出的 JSON 也很好上手。&lt;/li&gt;
&lt;li&gt;缺点：暂无官方 HA 实现，不过一般来说出问题往往是 offset 或者 schema 有问题，即使实例本身有问题，健康检查后自动重启了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;go-mysql-elasticsearch: 部署简单，适用于仅需要单表同步到 ES 的场景
&lt;ol&gt;
&lt;li&gt;优缺点同样突出，不赘述&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SLS logtail: 阿里云商业产品，应该是基于 canal 做的
&lt;ol&gt;
&lt;li&gt;可以一试，但整套服务需要都跑在阿里云上了，&lt;a href=&#34;https://help.aliyun.com/document_detail/64953.html?spm=a2c4g.11186623.2.35.1a70729aKm4hYD#concept-ypy-xvc-wdb&#34; title=&#34;MySQL Binlog 接入&#34;&gt;MySQL binlog 接入&lt;/a&gt; 上可以详细看看，实时性可以问下客服&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://debezium.io/&#34; title=&#34;Debezium&#34;&gt;Debezium&lt;/a&gt;: Redhat 支持开发，大量复用了 Kafka Connect 能力
&lt;ol&gt;
&lt;li&gt;优点：支持的异构存储特别特别多&lt;/li&gt;
&lt;li&gt;缺点：需要更多生产实践，其中关于如 bootstrap 的设计我觉得和实际生产使用不符，锁表这种行为肯定是不能接受的！&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为个人偏好 maxwell, 这里多说几句，官网文档写的真的不错，建议通读一遍。另外为了防止写入 Kafka 不同分区比例严重失衡，建议使用参数 &lt;code&gt;--kafka_partition_hash=murmur3&lt;/code&gt;, &lt;code&gt;--producer_partition_by&lt;/code&gt; 参数按需选择，建议至少要包含主键，加入库和表信息也可以。如果用的是阿里云 RDS，需要屏蔽部分表信息，具体忘了，可以 aliyun 关键词看下 issue.&lt;/p&gt;
&lt;p&gt;对于 HA，可以尝试自己基于 Zookeeper 定制，这个 &lt;a href=&#34;https://github.com/zendesk/maxwell/pull/415&#34; title=&#34;maxwell HA PR&#34;&gt;maxwell HA PR&lt;/a&gt; 可以参考。其实真出问题了，这种 Active-Standby 往往也于事无补，实例有问题，健康检查机制可以自动重启实例。实例逻辑无问题时，需要看看日志中 binlog offset, schema 等是否有问题，实在有问题的时候，简单粗暴的方案是 maxwell 库重建即可。但需要注意这段时间的增量数据丢失情况，理想情况下需要确定问题再找到对应 binlog offset 修正 schema 并重新消费。maxwell 的其他细节使用，中文版还可以参考 &lt;a href=&#34;https://laijianfeng.org/2019/03/MySQL-Binlog-%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7-Maxwell-%E8%AF%A6%E8%A7%A3/&#34; title=&#34;maxwell 详解&#34;&gt;maxwell 详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了以上几种工具，实际上还有个比较有希望的的开源项目，那就是 Netflix 即将开源的 &lt;a href=&#34;https://netflixtechblog.com/dblog-a-generic-change-data-capture-framework-69351fb9099b&#34; title=&#34;DBLog&#34;&gt;DBLog&lt;/a&gt; 和平台级方案 &lt;a href=&#34;https://netflixtechblog.com/delta-a-data-synchronization-and-enrichment-platform-e82c36a79aee&#34; title=&#34;Delta&#34;&gt;Delta&lt;/a&gt;. Debezium 最近基于 Kafka Connect 做了很多 connector, 可以说是很全了，但是关于DBLog 是真正从生产实践角度出发设计的 CDC 系统，其中用到的 binlog 解析库和 maxwell 师出同门。期待 DBLog 正式开源的那一天，从此一统开源 binlog CDC 领域 :)&lt;/p&gt;
&lt;p&gt;最后再说说阿里的日志服务 SLS，其实个人觉得 SLS 能实时接入 binlog，同时结合已有的函数开发能力，将会是一个非常值得期待的轻量级 CDC ETL 平台！然而就目前的关于函数消费的 &lt;a href=&#34;https://help.aliyun.com/document_detail/60291.html?spm=a2c4g.11186623.6.1019.c998194afE0All&#34; title=&#34;配置函数计算消费日志&#34;&gt;文档&lt;/a&gt;来看，还只能定时触发消费，无法实时消费，实在是一大遗憾。&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;实时计算&lt;/h3&gt;
&lt;p&gt;这一层所谓的『实时计算』可以包含很多概念，如基于行为事件的无/有状态计算，计算近 1/12/24 小时播放量，部分轻量级实时推荐策略等，亦或是由 binlog 实时流触发的宽表部分字段更新。Kafka Stream 的出现让这些轻量级实时数据处理变得更为容易，水平扩展得益于 partition 的水平扩展机制，也比较容易。与其动不动就上重量级武器如 Flink/Spark Streaming, 倒不如好好思考下一些简单的实时事件处理基于 Kafka Stream 是否更容易迭代和部署。Kafka Stream 的使用极其简单，Kafka 提供的是非常轻量级的库 kafka-stream, 业务逻辑写起来非常简单，基本没有诸如 Spark/Flink 之类的学习成本，而且可以和普通应用一样部署在 K8S 上，部署负担小很多。写过 Spark streaming 或 Flink 的人应该能明白我说的轻量级实时处理直接用 Kafka Stream 的好处了。&lt;/p&gt;
&lt;h3 id=&#34;heading-4&#34;&gt;数据仓库&lt;/h3&gt;
&lt;p&gt;对于推荐，实时推荐由于获取的信息比较局部，难以非常精准，一些特征往往还需要离线运行一些重量级机器/深度学习任务才能跑出来，这个时候自然需要业务和行为数据。传统的数仓方案为自建一套大数据平台，然后招一个团队来运维这套大数据平台。根据笔者的实际工作经验来看，对于大部分中小公司来说，这种投入产出比太低了。大数据平台所需的硬件成本不说，平台上一堆软件需要运维，而且动不动就是小文件或者数据倾斜问题，分析人员写出的 SQL 性能也是惨不忍睹，集群的资源能被耗光也不见得有多少产出，还容易遭到用户吐槽&amp;hellip;&lt;/p&gt;
&lt;p&gt;自从在阿里工作体验过 Dataworks, Maxcompute 这一系列组件后，真的感慨比开源的 HDP 那一套好用多了，成本也不高。如果再让我选型一次，数据仓库这一组件我会毫不犹豫选择阿里云的 Maxcompute, 而不是自建大数据集群然后基于 Hive 开发一系列离线任务。配合 Dataworks 开发套件，整个体验不要太爽。&lt;/p&gt;
&lt;h3 id=&#34;heading-5&#34;&gt;为什么需要宽表&lt;/h3&gt;
&lt;p&gt;其实在我设计第一版同步组件 MySQL ==&amp;gt; ES 时，并没有加入宽表这一层，直到来字节跳动工作后，和同事讨论过后，越发觉得宽表这一环节对整体环节十分重要。优点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接映射 ES 的文档设计&lt;/li&gt;
&lt;li&gt;作为 Redis 的缓存数据来源之一&lt;/li&gt;
&lt;li&gt;作为数据平台的来源之一，虽然也可以将所有业务表都导入数据平台，再做 ETL 产出宽表&lt;/li&gt;
&lt;li&gt;数据迁移时不用重复计算，设定 QPS select 宽表即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;heading-6&#34;&gt;数据迁移与同步&lt;/h3&gt;
&lt;p&gt;这个过程在关系型数据库和数据仓库间发生的频次尤其地多，比较原始的工具有 sqoop, 高级一点的有基于 binlog 自研的，如美团的 &lt;a href=&#34;https://tech.meituan.com/2018/12/06/binlog-dw.html&#34; title=&#34;数据仓库同步架构于实践&#34;&gt;数据仓库同步架构于实践&lt;/a&gt;, 字节跳动内部的同步也有异曲同工之妙，这种方式对于大表非常友好，节约资源。如果使用商业方案，阿里云的 Dataworks 中可以建一堆不同类型的同步任务，如果要更高级一点的，还有 DTS。所以中小公司基于阿里云来构建数据平台这一套服务是非常省时省力的，成本也不高。&lt;/p&gt;
&lt;p&gt;说完了上面的离线场景，我们再来说说搜索和推荐的实时同步场景，开源的方案有不少基于 Kafka Connect 来设计的，自己只需要写 source, sink 的逻辑就好了，设计好协议两边就能对接了。前面提到的 Debezium 也可以考虑。如果数据量特别大，基于 Flink connector 来设计也不失为一种好的方案。&lt;/p&gt;
&lt;h3 id=&#34;octopusflow---todo&#34;&gt;Octopusflow - TODO&lt;/h3&gt;
&lt;p&gt;最后出场的是自己正在着手设计的 &lt;a href=&#34;https://github.com/octopusflow&#34; title=&#34;Octopusflow&#34;&gt;Octopusflow&lt;/a&gt; 寓意是能像八爪鱼一样打通各种数据链路。之前在 Go 和 Java 间摇摆不定，现在还是觉得复用 Kafka Stream/Connect 来做落地最为容易，Java 对大多数人也算熟悉。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>字节跳动校招/社招内推，长期有效</title>
      <link>https://blog.yuanbin.me/posts/2020-02/2020-02-25_18-16-44/</link>
      <pubDate>Tue, 25 Feb 2020 18:16:45 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-02/2020-02-25_18-16-44/</guid>
      
        <description>&lt;p&gt;很显然这是一篇广告，该文章长期有效，各种岗位都可以试试。先说大家关心的，海量HC！校招/实习/社招都要！全世界各地大城市基本都有，机会多多！&lt;a href=&#34;https://job.bytedance.com/&#34; title=&#34;字节职位 JD 链接&#34;&gt;字节职位 JD 链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字节跳动校招内推码: &lt;strong&gt;QYVDPPA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从求职者的角度考虑，对于研发我能提供的辅助资源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简历反馈与指导，目前尽量保证3天内提供反馈&lt;/li&gt;
&lt;li&gt;可以先看我之前的校招准备及简历书写总结 &lt;a href=&#34;https://algorithm.yuanbin.me/zh-hans/appendix_i_interview_and_resume/&#34; title=&#34;面试准备及简历要点&#34;&gt;面试准备及简历要点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/billryan/resume&#34; title=&#34;LaTex 简历模板&#34;&gt;LaTex 简历模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://algorithm.yuanbin.me/zh-hans/&#34; title=&#34;算法基础知识总结&#34;&gt;算法基础知识总结&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如需简历反馈和指导的，请发至 &lt;a href=&#34;mailto:yuanbin.me@bytedance.com&#34;&gt;yuanbin.me@bytedance.com&lt;/a&gt; 提高成功率&lt;/p&gt;
&lt;p&gt;下面说说自己在字节跳动的体验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;公司相对阿里和腾讯还算年轻，公司文化比较适合年轻人，适合想做事情的年轻人&lt;/li&gt;
&lt;li&gt;一日三餐下午茶全包，节约了大量叫外卖等点餐的时间&lt;/li&gt;
&lt;li&gt;开发基础设施还算健全，虽然相对自己在阿里的体验还有些差距，但在逐步追赶中&lt;/li&gt;
&lt;li&gt;公司管理层靠谱，虽然近年来收购等扩张，一些团队水平高低不一，但通过高门槛的招聘补充新人，公司普遍还是在积极向上发展的&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Mosh&#43;tmux = SSH 好帮手</title>
      <link>https://blog.yuanbin.me/posts/2020-02/2020-02-13_22-19-02/</link>
      <pubDate>Thu, 13 Feb 2020 22:19:02 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-02/2020-02-13_22-19-02/</guid>
      
        <description>&lt;p&gt;今天写的是一篇工具类文章，专治各种 SSH 水土不服。在平时的科研或者后端开发过程中，我们总免不了要使用远端服务器来完成我们的工作，这里面会经常遇到的一个问题是当网络断开或重连时，需要反复 SSH 重连，这点重复工作大部分人倒是不会在乎的，真正让人烦恼的是重连后，你之前运行的程序有可能被 kill 掉了，有兴趣的读者可以进一步了解操作系统进程及信号之间的细节，&lt;a href=&#34;https://serverfault.com/questions/463366/does-getting-disconnected-from-an-ssh-session-kill-your-programs&#34; title=&#34;StackExchang&#34;&gt;StackExchange&lt;/a&gt; 上有一篇不错的文章对这一行为进行了解释并提供了一些解决方案，但这些方案都不是本文想介绍的。&lt;/p&gt;
&lt;p&gt;本着以人为本的原则，本文介绍的是 Mosh + tmux 这一组合拳，当然根据你的个人习惯，tmux 换为 screen 也未尝不可。下面快速介绍为什么同时需要这两个东西一起配合。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mosh: 可以网络漫游，切换网络等会自动重连，就像是你的 SSH 连接从未抛弃过你&lt;/li&gt;
&lt;li&gt;tmux: 可以自由定制你的命令行工作台，你的进程在 tmux 中运行，即使网络断掉，SSH 重连后 attach 之前的工作区，又可以无缝切到之前的工作状态，之前是啥样现在还是啥样，进程也不会被杀掉&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然这两个东西能提供的远不止以上两大好处，尤其是 tmux, 你可以加入一些自己喜欢的配置文件玩出花来。如果这两个东西只能要一样，那我会选择保留 tmux.&lt;/p&gt;
&lt;h3 id=&#34;-sshconfig&#34;&gt;善用 ~/.ssh/config&lt;/h3&gt;
&lt;p&gt;除了 SSH 连接优化类工具外，我常用的还有充分利用 &lt;code&gt;~/.ssh/config&lt;/code&gt;, 比如对一些常用的服务器，可以将主机名、用户、端口等写在配置文件中，使用时输入 &lt;code&gt;ssh dev&lt;/code&gt; 或者 &lt;code&gt;mosh dev&lt;/code&gt; 就行了，更不用说结合其它如 &lt;code&gt;rsync&lt;/code&gt; 可以大幅减少 SSH 相关指令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host dev
    HostName master.local.dev
    User master
    Port 5678
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Golang set 实现</title>
      <link>https://blog.yuanbin.me/posts/2020-02/2020-02-02_08-43-55/</link>
      <pubDate>Sun, 02 Feb 2020 08:43:56 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-02/2020-02-02_08-43-55/</guid>
      
        <description>&lt;p&gt;熟悉 Java 的看到这种标题，下意识会觉得这篇文章可能是分析 Go 中 set 的实现细节，但我要告诉你的是，Go 官方并没有 set 这种东西，需要的话自己去实现吧&amp;hellip; 于是有了这篇文章。知其然且知其所以然，Go 官方之所以还不提供原生的 set, 究其原因，个人猜测与 Go1 无泛型有关，map 和 slice 是 Go 在编译器层面做了手脚以支持『泛型』。可以阅读 &lt;a href=&#34;https://blog.golang.org/why-generics&#34; title=&#34;Go blog&#34;&gt;Go blog&lt;/a&gt; 的如下声明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we can write generic types, we can define new data structures, like these, that have the same type-checking advantages as slices and maps: the compiler can statically type-check the types of the values that they hold, and the values can be stored as themselves, not as interface types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了其他语言实现 set 的先例，我们依葫芦画瓢也是可以造出来的，以 Java 为例，我们可以基于 Go 的 map 来实现 set, 由于仅需要 key, 所以 value 部分我们能省则省。最开始我想到的是使用 bool, 毕竟空间够小嘛，但是，经过一番搜索后，我们可以发现有一种叫『&lt;a href=&#34;https://dave.cheney.net/2014/03/25/the-empty-struct&#34; title=&#34;Empty struct&#34;&gt;empty struct&lt;/a&gt;』的东西，它占用的空间是 0!&lt;/p&gt;
&lt;p&gt;如果只是使用 set, 目前的 &lt;a href=&#34;https://github.com/deckarep/golang-set&#34; title=&#34;Go set&#34;&gt;golang-set&lt;/a&gt; 流传较广，可以试试，虽然线程安全的 set 实现是直接使用读写锁这种粗粒度的锁。&lt;/p&gt;
&lt;h2 id=&#34;go-collections&#34;&gt;Go collections&lt;/h2&gt;
&lt;p&gt;Go set 的轮子其实已经不少了，八仙过海各显神通，为什么我还要重新发明轮子呢？一是为 Go 生态添砖加瓦；二是想在 set 中夹带私货，一些自己需要的 feature 可以自己按需实现；三是 set 实现也确实不难，练练手也是极好的。&lt;/p&gt;
&lt;p&gt;综上，我就 fork 了一个 &lt;a href=&#34;https://github.com/billryan/collections&#34; title=&#34;Go collections&#34;&gt;go-collections&lt;/a&gt;, 逐步完善 set, queue 等一系列基础数据结构。目前 set 的实现，加了 &lt;code&gt;Foreach&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt; 和 &lt;code&gt;UnmarshalText&lt;/code&gt;(toml 解析用) 这些有意思的实现，其他移植了部分 Java 和 Python 中常用的一些方法。&lt;/p&gt;
&lt;h3 id=&#34;-set---concurrentset&#34;&gt;并发 Set - ConcurrentSet&lt;/h3&gt;
&lt;p&gt;为了尽可能减少锁的使用，并发 Set 的实现内部的 Map 借助了官方的 &lt;code&gt;sync.Map&lt;/code&gt;, 这个 Map 采用空间换时间的思路优化读多写少的场景，但遗憾的是考虑到 Map size 并不是典型应用场景及性能的 tradeoff, 官方并未加入 Len 方法，综合考虑，我决定使用 atomic 来记录增删过程中的 Map 长度。这也是 ConcurrentSet 的实现背景。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>关于 东海一叶</title>
      <link>https://blog.yuanbin.me/about/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yuanbin.me/about/</guid>
      
        <description>&lt;p&gt;网络上我的常用 id 为 billryan, 这是我的博客，基于 Hugo 和 jane 主题，一段时间内都不再想浪费时间折腾主题，博客引擎等与知识加工无关的因素。新的 blog 将专注于知识沉淀，以技术为主，偶尔也会有一些非技术的杂谈。&lt;/p&gt;
&lt;p&gt;本科就读于西安电子科技大学通信工程专业，2013 年考研进入上海交通大学电子工程系(EE)无线所，研究生期间主要从事无线通信网络方面的研究，2016 年 3 月硕士毕业，毕业后果断弃坑通信转向计算机软件工程师。目前在一家大型创业公司工作，个人兴趣目前主要集中在垂直领域的搜索方向，会涉及一些实时数据流 CDC 的处理，曾经从 0 到 1 负责过某互联网金融 APP 推荐系统建设。&lt;/p&gt;
&lt;p&gt;你可以通过以下方式联系/了解我&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; &lt;strong&gt;me(at)yuanbin.me&lt;/strong&gt; OR &lt;strong&gt;yuanbin2014(at)gmail.com&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://github.com/billryan&#34;&gt;GitHub&lt;/a&gt; - 码代码的地方&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 博客主页 &lt;a href=&#34;https://blog.yuanbin.me&#34;&gt;https://blog.yuanbin.me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 摄影 &lt;a href=&#34;https://instagram.com/bin.yuan/&#34;&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yuque.com/billryan&#34;&gt;羽雀&lt;/a&gt; - 知识管理及沉淀平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://music.douban.com/people/billryan/&#34;&gt;豆瓣&lt;/a&gt; - 书影音&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>2019 年度总结</title>
      <link>https://blog.yuanbin.me/posts/2020-01/2020-01-29_23-25-37/</link>
      <pubDate>Wed, 29 Jan 2020 23:25:38 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2020-01/2020-01-29_23-25-37/</guid>
      
        <description>&lt;p&gt;2019 年，是我研究生毕业后工作的第三年，时光飞逝，自己再也不是象牙塔里的小孩子了，需要承担越来越多的责任和各方面的挑战。年度总结虽不那么『敏捷』，但把时间尺度拉长到整个生命的几十年甚至上百年时光中，定期的总结能以史为鉴，指引自己的方向，看到自己一步一步的成长轨迹。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;工作感悟&lt;/h2&gt;
&lt;p&gt;从这一年的工作经历来看，简历上确实有些难看，好在年底进入了一家个人觉得还不错的公司，公司文化和提供的福利能让员工更为高效和专注。综合这一年三家公司『丰富』的工作经验，深刻觉得好公司、好团队和好业务确实难以兼得，如果按工作体验排个序，我会倾向于一个好的团队，一个团队的天花板往往取决于团队的核心人物，团队的核心人物靠谱，能负责的业务往往不会差，机会也多。&lt;/p&gt;
&lt;p&gt;从工作内容的延续性来看，最近两三年可以认为一直在从事数据密集型应用、推荐系统和垂直领域搜索这几个领域。毕业初期做过一些大数据基础设施相关的工作，而后逐步转向应用方向，如一些客户画像、分类、AntiSpam、推荐系统和垂直领域搜索等，接触面虽广但深度还有待提升。2019 年在技术分享和总结上做的较差，2020 年争取在 CDC 实时流处理、推荐系统和 ES 搜索领域分享一些心得。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;旅行&lt;/h2&gt;
&lt;p&gt;2019 年 5 月去了一次大西北，走了一次青甘大环线，感慨祖国的大西北真是幅员辽阔和很多奇观异景，同时更感慨水资源的珍贵，前期的总结可以移步分类 &lt;a href=&#34;https://blog.yuanbin.me/categories/%E6%97%85%E6%B8%B8/&#34;&gt;旅游&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;书影音&lt;/h2&gt;
&lt;p&gt;2019 年的阅读量还是太少了，无论是代码、技术类书籍还是非技术类书籍，输入量都太小了。自己读过听过看过的一些比较有意思的资料总结如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://movie.douban.com/subject/34807113/&#34;&gt;走进比尔：解码比尔·盖茨&lt;/a&gt; - 看看盖茨是如何阅读和学习的，使用工程思维解决人类社会难题。他的好奇心、求知欲、工程能力和阅读习惯深深感染了我。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/column/intro/139&#34;&gt;MySQL实战45讲-丁奇&lt;/a&gt; - 作为后端，免不了要与数据库打交道，丁奇的这个专栏质量非常高，而且回复也极其认真，可以大大扩展自己对 MySQL 的了解和使用深度。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/column/intro/42&#34;&gt;技术与商业案例解读-徐飞&lt;/a&gt; - 除了纯技术外，我们也需要了解 IT 江湖的经典商业历史，以史为鉴，博采众长。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;投资&lt;/h2&gt;
&lt;p&gt;对于普通人来说，股票/基金/债券等是相对较为现实的一种投资方式，虽然这个市场可能只有 20% 不到的人是盈利的，但你可以利用钱来买到比你更适合的人去从事你所看好的行业，为你赚取更多回报。更重要的是，投资赚钱的能力是可以随着你的知识提升而提升的，那么越往后你盈利的概率就会越大。2019 年之前乱七八糟的都投过一些，曾经血赚过，也曾血亏过，也算是穿越感受过完整的牛熊周期了，越发觉得稳健的重要性。有幸遇到了小白菜推荐的『复利先生』，2019 年我尝试了可转债，虽然每次赚取利润不多，但好在心里安稳。买入的格力和场内中概互联也获利良多，视觉中国在两次黑天鹅事件后果断出手，也盈利了不少——机会是跌出来的，好公司的生意和盈利模式没有大幅改变时，一些小的黑天鹅不算啥。&lt;/p&gt;
&lt;p&gt;2020 年争取进军港美股，去香港把香港账户开了，了解更多好的科技公司，毕竟这是自己的行业，有一定的判断能力。&lt;/p&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;展望&lt;/h2&gt;
&lt;p&gt;公司有使命愿景价值观，那对于我个人来说，我的使命愿景价值观又是什么呢？——那就是在有限的生命里，体验这个世界更多的可能性，尽可能给这个世界创造更多美好的东西。&lt;/p&gt;
&lt;h3 id=&#34;todo&#34;&gt;TODO&lt;/h3&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;组建自己的小家庭，是时候送出一辈子的承诺了&lt;/li&gt;
&lt;li&gt;《原则》——阅读的过程中发现公司文化有不少和 Ray 的理念是相符的&lt;/li&gt;
&lt;li&gt;填坑 &lt;a href=&#34;https://octopusflow.github.io/&#34;&gt;octopusflow&lt;/a&gt;, 做 DAG 版的 CDC，面向搜索、推荐、缓存等 ToC 场景&lt;/li&gt;
&lt;li&gt;阅读计算机领域的一些经典论文&lt;/li&gt;
&lt;li&gt;读读 ES, lucene 的源码，深入了解检索领域的工程实现&lt;/li&gt;
&lt;li&gt;再去一次沙巴体验海岛和滑翔伞&lt;/li&gt;
&lt;li&gt;锻炼身体，早睡早起&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线-D6 张掖丹霞-227国道</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-50-22/</link>
      <pubDate>Sun, 23 Jun 2019 22:50:22 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-50-22/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;沙尘一瞥七彩丹霞，风雪远眺皑皑雪山&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第五天从敦煌赶往张掖，因为逛过阳关，不少人都已经对西北景点审美疲劳了，加之沙尘天气还未散去，中途的嘉峪关就直接略过了，导致一天全程基本都在路上，大环线的 D5 篇自然也就没有了。抵达张掖后，我们在丹霞景区附近住下，这一片还比较新，能吃饭的地方不多。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;张掖丹霞&lt;/h2&gt;
&lt;p&gt;由于沙尘暴的影响，我们错过了最适合观赏丹霞的晚霞时刻，下午便窝在宾馆里休息了。丹霞景区还是比较大的，游客可以凭身份证连续使用两天，在出口处登记即可。所以最佳使用方式是下午第一次使用看晚霞，第二天早上看朝霞，这两个时间点是最适合观景和拍照的。&lt;/p&gt;
&lt;p&gt;第二天早上沙尘天气依旧，但已经没有时间让我们多等一天了，我们驱车直奔丹霞景区。景区入口比一般的都要大一些，进去后又是熟悉的配方，坐大巴前往景区。景区大大小小有六个左右的片区可供观赏，其中的精华应该是最后一个和中间一个。除了大巴的方式，壕也可以选择直升机的方案鸟瞰整个景区，看普通游客看不到的景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-16_10-18-24.jpg&#34; alt=&#34;七彩丹霞&#34;&gt;&lt;/p&gt;
&lt;p&gt;不知道是恶劣的天气原因还是网上图片P的太过，我们看到的丹霞离五彩还是有点差距的 😔 不少片区的木梯还在刷油漆，味道刺鼻，好些游客因为这个原因放弃了部分景点。附上最后一站的沙尘+七彩丹霞，天气不好真是浪费了门票。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-16_10-11-07.jpg&#34; alt=&#34;七彩丹霞气球&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;225&#34;&gt;最美225国道&lt;/h2&gt;
&lt;p&gt;225 国道被评为中国最美的几大公路之一，沿途有雪山，戈壁滩，树林等，我们从丹霞游完后便沿225国道直奔西宁而去了。张掖部分的225国道在翻修，一半的树木被割掉，这意味着以后最美国道的可观赏区域越来越短了。从气候上来说，张掖应该是大环线上城市中最像南方城市的了，温度高，水源多。&lt;/p&gt;
&lt;p&gt;祁连山下好草原，如果七月八月来草长绿了，油菜花也黄了，远处的雪山仍旧是那么白，那么这一段就能算是最美公路了。在草原之前其实还有岗什卡雪峰，因为队友不再愿意下车远眺，于是又放弃了一个景点&amp;hellip; 😔&lt;/p&gt;
&lt;p&gt;穿过岗什卡雪峰和祁连山大草原后，我们就到达了本次大环线的最后一个险峰达坂山隧道了，马路九曲回肠，我们的司机仍然开到了 90 码，不得不佩服他高超的技术。穿越达坂山隧道后就进入青海省的范围了，下山的途中水源依旧丰富，我估计秋天的时候沿途的树林金黄一片应该也美极了。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;全剧终&lt;/h2&gt;
&lt;p&gt;至此，本次青甘大环线的全部行程就基本告一段落了，游记也全部整理完了，遗憾不少，主要是后面三天的沙尘暴来的实在不是时候，加之队友后面 3 天对西北景点已经有审美疲劳，我们也放弃了不少景点。如果再有一次机会，我一定会选择 7 月 8 月天气好的时候，走走小环线就好了，景点密度高，和一群志同道合的年轻小伙伴一起来看看祖国的大西北。&lt;/p&gt;
&lt;p&gt;羽雀专栏——&lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线-西北 6 日行 · 语雀&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线-D4 敦煌莫高窟-月牙泉</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-48-31/</link>
      <pubDate>Sun, 23 Jun 2019 22:48:31 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-48-31/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;一睹千年历史文化莫高窟，喜迎万丈黄沙飞天沙尘暴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;敦煌整个城市不大，城市路灯，建筑和雕饰都受到了莫高窟很大的影响，飞天等形象随处可见。下图是我们晚上在『敦煌小镇』觅食的地方，里面算是传统的夜市了，很多烧烤等小吃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-14_15-44-31.jpg&#34; alt=&#34;敦煌小镇&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天的原定行程是上午逛莫高窟，下午逛鸣沙山月牙泉，但逛完莫高窟后就遇到了沙尘暴，下午去了鸣沙山后又折返回宾馆休息了。不得不说这真是全程最大的遗憾了，即使有风沙，应该也可以留下一些西北的独特记忆，出一些不错的照片。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;敦煌莫高窟&lt;/h2&gt;
&lt;p&gt;敦煌莫高窟应该是很多人考虑大环线很重要的一个景点了，沉淀了近两千年的佛教文化，对佛教有研究的同学们一定不会错过。如果你要问我全程最热门的景点是哪一处，我觉得那肯定就是莫高窟了，莫高窟的门票是比较贵的，238 一人，还得到莫高窟指定的网站或者公众号上买票预约，最佳观看时间是早上 9 点那一档，如果确定去的话，需要尽可能提前购买，旺季时一票难求。&lt;/p&gt;
&lt;p&gt;莫高窟的门票中，238 块的是包含导游费用的，进去后首先是观看两场数字电影，随后由大巴进入真正的石窟景区，前面说过了，这是西北景区的通用套路，只是莫高窟距离检票口的距离更远一些&amp;hellip; 开始观看的两场数字电影是非常有利于了解石窟文化的。球状的幕布也挺新颖。进入景区后，会有专业的导游带队，并每人戴一副耳机听讲解，这次我们能看到的石窟是 8 个，其它的都是不允许观看的。里面有一个石窟是相对早期的作品，尽管过了上千年，保存依旧还是不错的。有不少石窟被清朝翻修过，很多人物表情明显就差了些意思，没有那么精致了。能到莫高窟开窟的不是达官显贵就是皇室家族了。除了莫高窟外，旁边还有一个日本人捐建的石窟博物馆，里面也有不少作品可以身临其境观看。莫高窟内很多经典都是禁止拍照的，因此这边我几乎没有拍过照片，下面拿一张随手拍的充充数大家感受下吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-14_13-18-49.jpg&#34; alt=&#34;敦煌莫高窟&#34;&gt;&lt;/p&gt;
&lt;p&gt;每一个窟就像是一间房子，进去后别有一番天地，一层叠一层。莫高窟历史上经历过两次比较大的劫难，一次被大火烧个精光，一次是战乱躲进去后生火氧化毁坏了不少艺术品。清末和建国以前，也有不少西方国家在莫高窟搜刮佛像和佛经，如今想要研究敦煌文化，还得去国外各种博物馆搜集资料，真是民族的耻辱！&lt;/p&gt;
&lt;p&gt;从莫高窟出来后可以看到路旁一些未完工的别墅群，司机说是因为官商勾结贪腐查案所以成了烂尾楼，可惜，可叹。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-14_15-14-10.jpg&#34; alt=&#34;废弃别墅群&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;鸣沙山月牙泉——风沙过大放弃&lt;/h2&gt;
&lt;p&gt;从以上两张图都可以看出从莫高窟内开始天空就起了沙尘暴，这些绿林还是没能阻止黄沙的肆虐。从莫高窟出来之后我们便朝鸣沙山月牙泉走去，因为风沙太大的缘故，我们实际上先回宾馆休息了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-14_15-10-49.jpg&#34; alt=&#34;鸣山村&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到宾馆后我们发现房间内靠近窗户的地方也全是沙子，西北这种风沙确实不适合人类长期居住。这种天气仍执意出行的需要戴好口罩，带相机的则需要保护好镜头，防止过多灰尘进入。在下午风变小后我们仍尝试再次出发前往鸣沙山月牙泉，走了一公里后司机说上去后什么也看不见，遂作罢。现在想想如果当初坚持去看看鸣沙山，说不定就能体会到真正的沙漠风景了。所以说要去西北的，建议还是做好这种心理准备，并能和在坏天气时也能不放弃的队友一起旅行。&lt;/p&gt;
&lt;p&gt;羽雀专栏——&lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线-西北 6 日行 · 语雀&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线-D3 南八仙雅丹-当金山-阳关</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-41-49/</link>
      <pubDate>Sun, 23 Jun 2019 22:41:50 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-41-49/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;深入无人区，翻越当金山，西出阳关无故人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第三天的行程又是远距离旅行，途中要经过不少需要严格检查的关卡，关卡的警察叔叔们八点半左右上班，所以我们必须早上七点准时出发以尽可能减少遇上关卡查人或者查物件(看人品)的几率，查物件时需要翻开所携带的所有行李，遇上前面有几辆大巴的话一天就过去一大半了。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;南八仙雅丹&lt;/h2&gt;
&lt;p&gt;前方的第一站是『南八仙雅丹』，也被称为魔鬼城，这个地方是风蚀形成的自然景观，目之所及，几乎看不到任何生物，也没有人类常住。我们早上八点半左右就到了，这个时候几乎没风，自然也听不到呼呼的『魔鬼声』，可惜的是天公不作美，蓝天也不在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-13_08-47-06.jpg&#34; alt=&#34;雅丹地貌&#34;&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是雅丹魔鬼城这边的公厕是及其简陋的，司机一直给我们说的就是辣眼睛，需要戴防毒面具，其它一个车队的游客有因为进了一次后吐到胃酸都出来的&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;冷湖镇偶遇野骆驼&lt;/h2&gt;
&lt;p&gt;从雅丹魔鬼城出来后我们便前往下一站当金山，在拐往冷湖镇的途中遇到了一群野骆驼，在荒凉的戈壁滩上徐徐前进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-30_20-19-09.jpg&#34; alt=&#34;马路骆驼&#34;&gt;&lt;/p&gt;
&lt;p&gt;冷湖镇是真的冷清，街上不见一个人，只有几只塑料袋在飘来飘去。司机师傅说不能在这边吃饭，吃了必拉肚子。不怕死的大可在这尝试一下。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;最美公路大片&lt;/h2&gt;
&lt;p&gt;从雅丹魔鬼城开车两小时后遇到的一条公路（冷湖镇范围）是整个环线中最适合飙车和拍公路大片的马路了，两边都是荒漠，路特别直，直通天际。这条公路适合拍摄集体照或者单人的飞天照，如果遇到蓝天白云那更是美的不行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-13_11-27-06.jpg&#34; alt=&#34;笔直公路&#34;&gt;&lt;/p&gt;
&lt;p&gt;从这条笔直公路拐弯后进入的是另一个无人区，远处的戈壁颇有点外星球的感觉。山脚下的沙石都变成白色的了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-13_12-44-05.jpg&#34; alt=&#34;无人区&#34;&gt;&lt;/p&gt;
&lt;p&gt;到当金山的时候已经下午了，山上的雪仍然未化，山路十八弯估计会让不少马路杀手闻风丧胆。&lt;/p&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;阿克塞小镇&lt;/h2&gt;
&lt;p&gt;过了当金山，基本就是甘肃的领地了，下山后有一个石油小镇的遗址，有不少电影道具还在那边留着，我们一行人兴趣不大就略过直接赶往阿克塞镇上直接吃中饭了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-30_20-53-23.jpg&#34; alt=&#34;阿克塞小镇&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;阳关&lt;/h2&gt;
&lt;p&gt;离开阿克塞小镇之后我们就直奔阳关了——劝君更尽一杯酒，西出阳关无故人。阳关的门票在线买的话需要提前半小时买，如果没有优惠就直接现场买，买完后蹭一个导游是最好的。到阳关的路上也是一路黄沙，有一小处有风蚀的雅丹地貌，拍照应该不错。快到阳关时我们已能远远地看到一大片绿林，在沙漠中很是茂盛，走进时发现这边是水源的聚集地，也是沙漠中的绿洲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-30_20-53-23.jpg&#34; alt=&#34;沙漠战车&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了绿洲，其它方向仍然是满目苍痍，寸草不生。此情此景不得不感概水源对生命的重要性，丝绸之路的开通真是不容易。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-13_18-03-05.jpg&#34; alt=&#34;阳关绿洲&#34;&gt;&lt;/p&gt;
&lt;p&gt;羽雀专栏——&lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线-西北 6 日行 · 语雀&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线-D2 德令哈-大柴旦镇翡翠湖</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-36-49/</link>
      <pubDate>Sun, 23 Jun 2019 22:36:50 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-23_22-36-49/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;深入柴达木盆地腹地，巧遇德令哈外星人遗址，邂逅最美大柴旦镇翡翠湖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二天的行程本可以安排早上的茶卡盐湖和下午的翡翠湖，但我们在第一天下午已经逛过茶卡盐湖天空一号，对景区极为失望，虽然第二天天气非常适合去盐湖拍照，但我们还是放弃了，直接前往400公里开外的大柴旦镇。
西北这边两个小镇之间往往相隔较远，几十公里上百公里也常见，所以测速基本以区间测速为主，我们在途中路况好的地方跑150码左右，然后在途中一些点下车拍照休息。我们早上八点多出发，下午近一点抵达大柴旦镇。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;德令哈外星人遗址&lt;/h2&gt;
&lt;p&gt;途经德令哈的时候司机给我们说这边有外星人基地，我首先是很不屑一顾地笑了笑，以为又是师傅说的一个当地流传的神话故事，万万没想到的是，这个遗址还真是真实存在，名字还是『外星人遗址』！前往外星人遗址的话，又得往返近150公里了，而且现在那个遗址已经坍塌，也看不到多少有价值的东西了，作罢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-12_11-05-38.jpg&#34; alt=&#34;德令哈外星人遗址&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;大柴旦镇&lt;/h2&gt;
&lt;p&gt;前往大柴旦镇的旅途属于柴达木盆地的一部分，极具西北特色，5月份的路边满目荒凉，基本只有黄色的骆驼草，野生的黑枸杞等，唯一值得让人欣慰的就是远方的雪山了。下图雪山脚下的小镇就是大柴旦镇了，远处看着不大，但实际步行起来还是有点规模的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-12_12-52-34.jpg&#34; alt=&#34;柴旦镇&#34;&gt;&lt;/p&gt;
&lt;p&gt;在大柴旦镇走了几条街，发现这边除了本地饭店之外基本就是川菜了，颇具规模。在这边吃完中饭后，我们便趁人少顶着烈日去了翡翠湖景区，翡翠湖景区目前还处于开发中，不收门票，和茶卡盐湖类似也是盐湖，但相比天空一号来说规模小很多。远处看似就在小镇旁边，但实际上离大柴旦镇有七八公里远，进去的一段沙石路并不好走。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;翡翠湖&lt;/h2&gt;
&lt;p&gt;在快抵达翡翠湖时我们发现已经有从茶卡镇那边陆续过来的大巴了，两辆大巴的人几乎就能把整个翡翠湖塞满，不敢想象七八月旺季的时候那里人山人海的场景。翡翠湖之所以叫翡翠湖，是因为其中一两个盐湖颜色绿的像翡翠。听司机说的其实在这个翡翠湖之前，还有些其它颜色如红色的盐湖，天气好遇到晚霞时景色异常艳丽。但是在工业开采过后，很多曾经美丽的五颜六色的盐湖都消失了。目前景区还在开发中，暂未收费，预计下半年修好后就会开始收费了。现在游客能观看的一般是三个湖，两个翡翠色深一点，另外一个浅一些，另外还有一个几乎没有水的盐湖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-12_16-02-51.jpg&#34; alt=&#34;柴旦镇&#34;&gt;&lt;/p&gt;
&lt;p&gt;中午时分感觉风不大，但当我们到达湖边时风已经起来了，想要达到和茶卡盐湖类似的镜面效果也是奢求了，刚进去的两个湖颜色还挺耐看的，但后面这个湖的颜色就差强人意了，风大的时候雪山的倒影也不清晰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-12_16-00-33.jpg&#34; alt=&#34;翡翠湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;逛完了几处翡翠色的小湖，我们来到了靠近雪山脚下的一片盐田寻找灵感，人可以穿鞋踩进去也不用担心陷进去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-12_16-10-38.jpg&#34; alt=&#34;翡翠湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;晚上八点半左右日落时本还有所期待，没想到风仍然是大成狗，而且也没有一点晚霞的样子，晚上出来看星空也没有看到银河，有点小失望 😞&lt;/p&gt;
&lt;p&gt;羽雀专栏——&lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线-西北 6 日行 · 语雀&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线-D1 塔尔寺-拉脊山-青海湖-茶卡盐湖</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-15_15-40-53/</link>
      <pubDate>Sat, 15 Jun 2019 15:40:53 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-15_15-40-53/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;翻越拉脊山，醉美青海湖，远眺日月山，梦断茶卡盐湖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;heading&#34;&gt;塔尔寺&lt;/h2&gt;
&lt;p&gt;在西宁修整一晚后，我们便按照司机吩咐早上七点吃完早餐将行礼放至车上前往塔尔寺，塔尔寺是一座非常有名的西北藏传佛教寺，历史悠久，距离西宁市区不算近，约有五十公里。我们行至塔尔寺脚下时，已经过了七点半，这时已经有工作人员上班封路了。正当我们认为要去他们指定的停车场并付费乘坐电瓶车时，老司机说他有祖传的密道，直达寺庙入口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-11_08-07-00.jpg&#34; alt=&#34;塔尔寺&#34;&gt;&lt;/p&gt;
&lt;p&gt;塔尔寺内较大，里面不仅有各种佛像金身，也有历史悠久的艺术瑰宝。我们一行人中虽有信佛的但是对这种历史悠久的藏传佛教文化所知还是甚少，蹭了几个导游了解了一些历史和文化，也不枉白来一趟。门内外的转轮和游览方向几乎都遵循顺时针方向，到处都遍布着虔诚的信徒。考虑到路途遥远，我们在寺内逛了差不多两小时后便前往下一站拉脊山了。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;拉脊山&lt;/h2&gt;
&lt;p&gt;从塔尔寺到拉脊山大约40公里，但由于沿途要翻山越岭走盘山公路，我们实际花了约40分钟抵达山峰。对于我们这种从南方长大的孩子，沿途能远眺到白皑皑的雪山时已激动不已，雪是那么的白，天空也非常干净，唯独图中的挡风玻璃是个 bug。沿途从山脚三千多米到山峰四千多米，我们明显能感觉到风越来越大，气温越来越低，沿途遇到不错的风景下车时需要注意防寒保暖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-11_10-09-58.jpg&#34; alt=&#34;拉脊山路上&#34;&gt;&lt;/p&gt;
&lt;p&gt;拉脊山峰处其实不大，风倒是呼呼地刮，一件薄薄的轻羽绒根本顶不住那刺骨的寒风。一脚踏进山峰边的积雪上，快到膝盖了&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-11_10-42-30.jpg&#34; alt=&#34;拉脊山&#34;&gt;&lt;/p&gt;
&lt;p&gt;拉脊山上的洗手间是我们行程中第一个无水洗手的洗手间，当然也不是最后一个&amp;hellip; 我们一行人大概谁也没想到后面的洗手间环境更为恶劣，拿司机的话来说就是辣眼睛 👀 此处省略一万字，请各位看官自行脑补 😁&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;青海湖&lt;/h2&gt;
&lt;p&gt;告别了拉脊山，我们便下山直奔青海湖。从拉脊山前往青海湖大约120公里，我们花了不到两个小时就到了，快到青海湖的时候，我们便远远地看到了一片碧蓝色的大海，犹如镶嵌在高原上的一颗宝石。&lt;/p&gt;
&lt;p&gt;可惜的是5月份还没种油菜花，湖旁边的空地上一片荒凉，只有零星的几根草。这些空地看起来有些有路可以开进去，但需要注意的是，**这些路不是都可以随便进去的，有些是钓鱼执法！牧民会让你按损坏的草的根数进行敲诈勒索！**好在老司机轻车熟路，告诉我们其实青海湖最佳游览点不在官方的二郎剑景区，而在旁边一个私人搭建的区域，这两个的区别在于二郎剑景区有大船，但风大的时候船不会开多远。在司机的建议下，我们去了这个私人区域，司机讨价还价，说淡季便宜点，最终30一个人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-11_12-47-33.jpg&#34; alt=&#34;青海湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们去的那天下午天气还不错，但风那是真的大，湖水很干净，远处颜色很蓝，在尽头相接的雪山就是日月山脉了。雪山脚下充满了西北的特色，全是戈壁滩沙石，寸草不生。&lt;/p&gt;
&lt;p&gt;这个私人景点有几处青海湖的石碑，最适合打卡的是风口浪尖带着牛头的石碑，给个浪花大家感受一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-11_13-03-45.jpg&#34; alt=&#34;青海湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;在青海湖逗留了约一个小时，我们便前往号称天空之镜的茶卡盐湖去了，沿途的一些如倒淌河，文成公主等日月山旁的小景点我们觉得没啥意思让司机没停直接开过去了，中饭也是在车内解决节约时间。&lt;/p&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;茶卡盐湖&lt;/h2&gt;
&lt;p&gt;抵达茶卡盐湖的时间大约是下午四点，行程里程约150公里，这段路有不少山路和限速路段，我们行驶了约两个半小时才到。这段路也是典型的西北荒漠，只能看到零星的几根骆驼草散发出的生命的气息，远处偶尔能见一些雪山。&lt;/p&gt;
&lt;p&gt;茶卡盐湖实际上是很大一片盐湖，供工业开采用，我们到达的时候老的景区可能在下雨，于是便尝试了一下路边的广告牌『天空一号』景区，这个景区是新修的，就盐湖构成上和传统的茶卡盐湖景区是一样的。本着猎奇的心态，我们买了门票，电瓶车交通票和下盐湖拍倒影用的靴子。&lt;strong&gt;事实证明这是一次非常失败的尝试&lt;/strong&gt;，当天下午风嗖嗖地刮，再好的湖面也不太可能会有什么天空之镜的效果，游玩体验极差！更为恶劣的是，这个天空一号修这么大，有一大片都是开发中或者未开发的盐湖，没完成的景区就开始收高昂的门票和交通费这一点让我们十分气愤。&lt;/p&gt;
&lt;p&gt;本以为盐湖会像青海湖一样深不见底，实际却发现盐湖普遍不过是浅浅的一层，穿个靴子就能下去了，这样的好处是适合站在湖中拍照，没风的时候适合出大片。如果一定要来茶卡盐湖景区，强烈建议只在风小的时候前往，且在天空一号景区未开发成熟前还是去老的景区，至少老景区还是有些盐雕等适合拍照的打卡地。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-11_16-31-04.jpg&#34; alt=&#34;茶卡盐湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;在茶卡盐湖的这个景点上，根据到达茶卡的时间点，我们是可以选择当天下午或者第二天早晨游玩的，由于我们在之前的景点逗留时间都不长，加之司机开车又快又稳，我们到盐湖的时候还是挺早的。但由于未和司机做充分的沟通，也不了解在天气不好或是风大时不适合游玩盐湖景点，我以为这个景点必须下午玩，于是便让司机去了天空一号景区。在传统的攻略上，会有一项黑马河看日出的行程，但实际上由于黑马河镇太小，太多小作坊式的住宿点，被投诉过于严重，现已被国家强制拆除，所以我们只能夜宿茶卡镇，那些所谓的黑马河看日出也几乎是不可能的了。&lt;/p&gt;
&lt;p&gt;当晚在茶卡镇我们找了家当地的饭店，吃了羊肉火锅，味道也还不错，并且没什么膻味，这一点远超大部分东部城市地区的肥羊。我们住的宾馆就在茶卡盐湖旁边，但由于晚上有点事情，我们也没有出来走走看看日落，接近十点的时候，看了下天空好像也没有什么银河之类的壮观夜景。早上在宾馆外面散步时，发现风还挺小的，其实此时是非常适合去茶卡盐湖打卡拍照的，但因为昨天天空一号被伤过，其他人似乎都无兴致，我也断掉再去老景区打卡的念头了。人多的时候总是众口难调，一起旅游的要么是想法一致，要么能理解其他人并做一定妥协，否则很容易在旅途中产生矛盾。&lt;/p&gt;
&lt;p&gt;羽雀专栏——&lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线-西北 6 日行 · 语雀&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线-行程概览</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-12_22-00-00/</link>
      <pubDate>Wed, 12 Jun 2019 22:00:00 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-12_22-00-00/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;青甘大环线，爬雪山，过草地，穿越无人区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自打四月底确定去阿里系的一家公司后，我便和女朋友寻思着怎么利用这段离职交接的间隙来一场家庭旅游。我们的初步候选地点有东南亚、台湾、桂林、云南九寨沟和青海，考虑到签证等多方面因素，我们最终选定了绵延近 3000 公里的甘青大环线。&lt;/p&gt;
&lt;p&gt;看过同学八月份在甘肃和青海的租车自驾攻略，风景真是美如画，便更坚定了自驾游的意愿。借助万能的淘宝，我们找到了一家口碑和价格都极好的旅行社，确定了6天5晚的包车自驾游套餐，最终套餐优惠下来实际上是6天6晚，路线是经典的甘青大环线。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;行程概览&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-19_09-45-28.jpg&#34; alt=&#34;行程概览&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上海出发的每天的实际详细行程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-01_08-07-00.jpg&#34; alt=&#34;上海出发&#34;&gt;&lt;/p&gt;
&lt;p&gt;行程规划类的 APP 之前有用过 出发吧，觉得做的太烂了，这次换成了 穷游行程助手，感觉还凑合。上海到西宁的航班不仅时间不合适，票价还是到兰州的近两倍&amp;hellip; 好在兰州机场有城铁到火车站，所以兰州中转也是可以接受的。&lt;/p&gt;
&lt;p&gt;此次行程主要是包车自驾游，我们的老司机还是挺辛苦的，西宁当地人，对路况非常熟悉，开车技术一流，无人区中能飙150码，在最险的山路上还可以开90 码 😁 司机集多种功能于一身，开车、摄影、介绍沿途典故、景点攻略和美食推荐一样不落！这里要再次感谢马师傅，让我们的西北之行有了更好的安全保障和游玩体验。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;费用&lt;/h2&gt;
&lt;p&gt;上海到西宁的机票加动车往返全程 1350，包车自驾游1390(含住宿)，吃饭一天在一百以内，门票费用差不多 600，全部费用预估在 4000 以内。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;塔尔寺 70&lt;/li&gt;
&lt;li&gt;拉脊山 0&lt;/li&gt;
&lt;li&gt;青海湖私人景点 30(师傅帮我们砍价了)&lt;/li&gt;
&lt;li&gt;茶卡天空一号 50+20&lt;/li&gt;
&lt;li&gt;翡翠湖 0&lt;/li&gt;
&lt;li&gt;南八仙雅丹魔鬼城 0&lt;/li&gt;
&lt;li&gt;阳关 70&lt;/li&gt;
&lt;li&gt;敦煌石窟 238&lt;/li&gt;
&lt;li&gt;张掖丹霞 70&lt;/li&gt;
&lt;li&gt;嘉峪关那边由于已经逛过阳关了，大家有点累就没去，鸣沙山因为遇到沙尘暴，也取消了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;交通方案及行前准备&lt;/h2&gt;
&lt;p&gt;由于祖国的大西北普遍地广人稀，路途遥远，所以甘青大环线比较经典的自驾游走法也就那么些，绝大多数人会选择西宁作为行程的起止点，这种走法每天的行程安排较为紧凑。其它城市也不是不可以，难在包车自驾游的选择上。&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;西宁不便则从兰州或张掖中转&lt;/h3&gt;
&lt;p&gt;由于西宁不是热门的西北城市，交通还是略显不便的，上海这边直达的航班不仅比较少，而且还比较贵，单程都要1000多了。看了看淘宝上套餐中兰州起止的方案，其实也是先到兰州再自行去西宁的，所以甘青环线不管怎么安排，比较好的选择中，基本都绕不开以西宁作为起止点。&lt;/p&gt;
&lt;p&gt;在西北的这些城市中，西宁旁边的城市有兰州和张掖，兰州机场到兰州火车站，有专门的城铁(35分钟到兰州西站)，机场内即可无缝接驳，兰州火车西站到西宁则有动车和直达车(2小时多一点)，两趟火车的价格加起来几十块就搞定了。所以如果选择兰州作为中转，机票往返才1210，比直接到西宁的方案便宜接近一半，而且可以虹桥起飞，代价则是会多两小时的火车中转时间。&lt;/p&gt;
&lt;p&gt;张掖到西宁的动车时间一般在两小时以内，和兰州的时间相差不大。但直飞张掖的航班就比兰州少多了，上海过去有一趟春秋的航班，价格比较便宜。关于动车和普通直达车的选择: 建议多花一二十块享受下更为舒适的动车，还可以选座。七月八月是西北的旅游旺季，刚查了下直飞西宁的价格和兰州也相差不远了，所以还是建议兰州，张掖和西宁这三种航班方案都比较下。&lt;/p&gt;
&lt;h3 id=&#34;heading-4&#34;&gt;上海出发行程参考&lt;/h3&gt;
&lt;p&gt;附上我们当时上海出发的行程参考&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;去程：上海 -&amp;gt; 兰州 -&amp;gt; 西宁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-06-02_08-08-13.jpg&#34; alt=&#34;上海出发&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回程：西宁 -&amp;gt; 兰州 -&amp;gt; 上海&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-06-02_08-08-20.jpg&#34; alt=&#34;回上海&#34;&gt;&lt;/p&gt;
&lt;p&gt;回程怕赶不上飞机也可以前一天晚上住兰州火车站，不担心的大可西宁休息第二天赶车。&lt;/p&gt;
&lt;h2 id=&#34;heading-5&#34;&gt;行前准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;温度：青甘大环线上一路都是高原为主，也有几处为雪山，所以防寒肯定跑不掉的。&lt;/li&gt;
&lt;li&gt;大风及沙尘：运气不好的话会遇到大风和沙尘天气，迪卡侬有专业的防风沙面罩，强烈建议入手。&lt;/li&gt;
&lt;li&gt;医药：特殊的药品一定要自带，一路上以小镇为主，药店少的可怜，只有一些常用药。担心落地就高原反应的可以带一些高反药物。一般如果是包车自驾游的旅行社产品车上会带。&lt;/li&gt;
&lt;li&gt;手机信号：大部分地方信号还是可以的，一少部分无人区公路和山路信号不太好，移动的信号覆盖度普遍会好一点点。&lt;/li&gt;
&lt;li&gt;景点门票：敦煌莫高窟一定要提前一个月甚至更早预约，莫高窟这个门票需要到他的指定网站购买，无法在其他 APP 购买。部分景点对电子票有生效期的限制，建议提前至少一个小时购买，否则到了景区可能无法兑换。&lt;/li&gt;
&lt;li&gt;区间限速：可以开一段超速的搭配中途休息拍照缓冲。&lt;/li&gt;
&lt;li&gt;自驾：如果不请当地司机的话一定要提前熟悉下路况，部分山路还是挺危险的。&lt;/li&gt;
&lt;li&gt;饮食：当地以清真为主，建议尊重一些当地的风俗，不带酒及外食。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在行程的前几天，旅行社便安排司机师傅对接了，并约定抵达西宁的当天由师傅接送至宾馆，我们住在西宁的第一晚是吉华宾馆，条件还不错。5月10日从兰州坐火车抵达西宁车站大约是五点半，我们出站后发现司机师傅已早早地在车站旁边等候了，感觉很守时，赞一个。看得出来师傅是位很客气友好的老司机，一问是当地人，给我们介绍了哪里有好吃的，哪里可以买到本地的特产而且不容易被宰。宾馆离火车站很近，几分钟后便到了，到宾馆办理完入住手续后司机便载我们到当地的新千国际广场大快朵颐。&lt;/p&gt;
&lt;h2 id=&#34;heading-6&#34;&gt;吃吃吃&lt;/h2&gt;
&lt;p&gt;晚上我们吃了当地有名的炕锅羊肉，一大盘只要138，肉比较足，味道也鲜美，问了下老板有没有汤和米饭之类的，答曰没有。店家给的说法是他们这里的市场规则是这家店不允许提供汤和米饭，需要的要去旁边其它专门卖米饭或者卖汤的店买。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yuanbin.me/pictures/2019/201905/2019-05-10_18.47.39.jpg&#34; alt=&#34;大餐&#34;&gt;&lt;/p&gt;
&lt;p&gt;酒足饭饱后我们步行回到了宾馆，在回宾馆的路上遇到了清真寺开斋或是礼毕，门口的小孩子端着一盆又一盆葡萄干和大枣，嗯，很香！&lt;/p&gt;
&lt;h2 id=&#34;heading-7&#34;&gt;早起防坑&lt;/h2&gt;
&lt;p&gt;对于明天第一站塔尔寺的行程，司机特意说了塔尔寺需要赶在七点半工作人员到达，否则需要停至他们指定的停车场，并额外交几十块的电瓶车费用用于抵达景区门口。去西北的景点玩的多了后发现，这些都是西北旅游景点的套路，检票口修在离真实景点很远的地方，让你几乎一定会乘坐他们的内部交通工具，最常见的就是这种能装不少人的电瓶车了，这种车一趟一般都是20起步，简直是暴利！&lt;/p&gt;
&lt;h2 id=&#34;heading-8&#34;&gt;旅游方案选择&lt;/h2&gt;
&lt;p&gt;青海甘肃这一圈有大环线和小环线两种方案，时间长的到一周可以建议大环线，时间紧张只有四天的建议小环线，小环线的景观密度更高，但是会少了敦煌这一文化瑰宝。自驾游的话，选好司机非常重要，安全第一，不要一味图便宜！&lt;/p&gt;
&lt;p&gt;值得一提的是敦煌石窟门票需要提前网上预约，遇到下雨等不良天气时可能无法参观。西北这边的大环线想要玩的好，选对季节和天气很重要，我们五月中旬去了一趟感觉还是不理想，前三天天气虽好，但是狂风大作，茶卡盐湖也不再是『天空之镜』，后三天偶遇沙尘暴，尘土飞扬，山上的草也还是略显枯黄，少了几分生命的脉动。七八月是最佳旅游时节，但这两个月各种费用都贵，暑假学生也多，做好心理准备 😁&lt;/p&gt;
&lt;p&gt;通过此次西北之行，我们感受到了西北真是地广人稀，水资源的宝贵。如果再去一次大西北，我会选择七八月再去看看那广袤的门源油菜花海和祁连山下的大草原，秋天再去邂逅那最美的227国道。&lt;/p&gt;
&lt;p&gt;后文将分景点单独介绍我们的旅游体验，敬请关注 😄&lt;/p&gt;
&lt;p&gt;羽雀专栏——&lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线-西北 6 日行 · 语雀&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>青甘大环线 6 日游</title>
      <link>https://blog.yuanbin.me/posts/2019-06/2019-06-02_23-16-23/</link>
      <pubDate>Sun, 02 Jun 2019 23:16:23 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-06/2019-06-02_23-16-23/</guid>
      
        <description>&lt;p&gt;5 月 10 日从上海出发，至 17 号抵达上海，大环线车程耗时 6 天，全程近 3000 公里，终于有机会一睹西北的风采了。前三天的天气还凑合，可从第四天开始就遇到了沙尘暴，所有景点几乎全蒙上了一层阴影，好些景点因为天气和人的原因都没去成。以后争取七月八月再去一次小环线吧，真是心有不甘。游记的图片还是略多的，博客里面插图还是略显不便，周末试用了一下蚂蚁的 &lt;a href=&#34;https://www.yuque.com&#34;&gt;羽雀&lt;/a&gt;, 第一次知道这货是因为团队内部在内网用羽雀协作文档。偶然发现外网也有，用来写游记还真不错，欢迎有兴趣的前往我的 &lt;a href=&#34;https://www.yuque.com/billryan/siab93&#34;&gt;青甘大环线&lt;/a&gt; 专栏阅读。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>阿里云 EMR gateway 替代方案</title>
      <link>https://blog.yuanbin.me/posts/2019-03/2019-03-25_20-59-21/</link>
      <pubDate>Mon, 25 Mar 2019 20:59:21 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-03/2019-03-25_20-59-21/</guid>
      
        <description>&lt;p&gt;本文主要分享小规模开发测试环境下阿里云 EMR gateway 节点的替代方案，同时也为想寻找同时支持 HTTP proxy 和 websocket 的代理工具提供一些思路。传统的 HTTP proxy 有 Squid, 但是 Squid 对 HTTPS, HTTP/2 和 websocket 的支持不算太好。在大部分简单场景下，我推荐部署和配置极其简单的 &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt;, 配合 forwardproxy 插件配置起来非常简单。&lt;/p&gt;
&lt;p&gt;到官网下载即可，选中 &lt;code&gt;http.forwardproxy&lt;/code&gt;，可能需要根据自己的平台适配，如 Linux64 下可以如下安装。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://getcaddy.com | bash -s personal http.forwardproxy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;想作为系统启动服务进行管理可参考 Caddy 的 systemd 服务，见 &lt;a href=&#34;https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service&#34;&gt;caddy.service&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.0.0.0:3128 {
    errors
    forwardproxy {
        basicauth your_user your_pass
        acl {
            allow 10.0.x.0/24
            deny all
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中的 ACL 规则和认证可根据自己集群的情况进行调整。配合 letsencrypt, Caddy 还可以支持 HTTP/2(HTTPS) 代理，很美好&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>信息流推荐和搜索的实时数据流架构</title>
      <link>https://blog.yuanbin.me/posts/2019-03/2019-03-19_23-33-51/</link>
      <pubDate>Tue, 19 Mar 2019 23:33:51 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-03/2019-03-19_23-33-51/</guid>
      
        <description>&lt;p&gt;本文主要介绍了自己近两个月重构产品推荐引擎后端的实时数据流同步架构，抛弃了之前的 Spark Streaming, 选择了基于 Kafka Stream 以及 Kafka Connect 做一些轻量级的实时 ETL.&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;数据流同步架构&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;                +-------+         +---------------+
                | Redis +&amp;lt;-+   +-&amp;gt;+ Elasticsearch |
                +-------+  |   |  +---------------+
                           |   |
                           |   |
                           |   |
    +--------------+  +----+---+------+
+---+ Kafka Stream |  | Kafka Connect |
|   +------+-------+  +-------+-------+
|          ^                  ^
|          |                  |
|          |                  |
|    +-----+------------------+------+
+---&amp;gt;+             Kafka             |
     +---+--------------------+------+
         ^                    ^
         |Maxwell             |
         |                    |
     +---+----+       +-------+------+
     | binlog |       | tracking log |
     +----+---+       +--------------+
          ^
          |
          |
      +---+---+
      | MySQL |
      +-------+
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;binlog--kafka-maxwell-vs-canal&#34;&gt;binlog 到 Kafka 工具选型，maxwell vs canal&lt;/h3&gt;
&lt;p&gt;从数据的生产者来看，我们的数据源主要由产品数据库 MySQL(binlog) 和前端用户行为日志埋点两部分构成。binlog 到 Kafka 我选用了 &lt;a href=&#34;https://github.com/zendesk/maxwell&#34;&gt;zendesk/maxwell&lt;/a&gt; 而不是国内使用较多的 &lt;a href=&#34;https://github.com/alibaba/canal&#34;&gt;alibaba/canal&lt;/a&gt;. 原因主要是因为我们的产品库目前还比较单一，maxwell 使用和部署比较简单，而且能以已经解析好的 schema 数据进入 Kafka, 这对后面对接的 Elasticsearch 非常友好。新版的 canal 其实也具备了直接生产到 Kafka 和 Elasticsearch 的能力了，但就到 Kafka 这一环来说，canal 在使用上还是有一些不便利的地方，maxwell 在一些细节上更为便利些。但是需要注意的是，maxwell 在生产环境上需要自己定制 HA 方案，就我们的实测发现，产品起步阶段的量级用 maxwell 毫无压力。&lt;/p&gt;
&lt;h3 id=&#34;kafka-stream--etl-&#34;&gt;Kafka Stream, 实时 ETL 的好工具&lt;/h3&gt;
&lt;p&gt;国内 Kafka Stream 的文档相对还是不多的，Kafka 官网和 confluent 的文档比较详细，可以读一读。在尝试 Kafka Stream 之前，因为自己对 Spark 熟悉一些，尝试了 Spark Streaming 作为实时数据同步任务。使用过程中我们发现一些痛点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spark 开发起来太重了，对小团队有较高的使用成本&lt;/li&gt;
&lt;li&gt;CICD 融入 K8S 比较困难，开发迭代较慢&lt;/li&gt;
&lt;li&gt;资源消耗高，不适合小公司/初创公司&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在读了一些 Kafka Stream 的文档后，我首先写了一个 &lt;code&gt;kafka-stream-filter&lt;/code&gt; 作为 binlog 到 Kafka 的路由分发器。觉得确实和文档里说的一样，非常轻，使用 Kafka Stream 只需要像其它普通库一样使用，但是可以完美结合 Kafka 的水平 scale 能力，没有水平扩展的压力。部署上，我可以像普通 Java 应用一样部署在 K8S 上，运维管理上比较统一。资源上也能节约不少，测试环境上数据量小一点的内存分配 500MB 以内足够了。&lt;/p&gt;
&lt;p&gt;Kafka Stream 的定位并不是一个 ETL 的全能工具，它聚焦在以 Kafka 为核心的 ETL, 数据输出也通常在 Kafka 的其它 topic 中。&lt;/p&gt;
&lt;h3 id=&#34;kafka-connect--kafka-&#34;&gt;Kafka Connect, 沟通 Kafka 和其它存储系统的桥梁&lt;/h3&gt;
&lt;p&gt;如果说 Kafka Stream 可以专注于实时 ETL 并将数据存储在 Kafka 中，那么 Kafka Connect 解决的问题则是如何将 Kafka 和外部存储系统对接了。官方的 Kafka Connect 已经为我们准备好了很贴心的同步框架，容错、任务数扩展等都比较完善。即使自己从头开发，开发成本也不算高。后文我会开源自己设计的 &lt;code&gt;kafka-connect-redis&lt;/code&gt; 和 &lt;code&gt;kafka-connect-elasticsearch&lt;/code&gt;. 同步协议上参考了 maxwell, 有点类似 Event Sourcing.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JVM 在 Docker 等容器环境下的资源限制问题</title>
      <link>https://blog.yuanbin.me/posts/2019-03/2019-03-18_23-30-06/</link>
      <pubDate>Mon, 18 Mar 2019 23:30:06 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-03/2019-03-18_23-30-06/</guid>
      
        <description>&lt;h1 id=&#34;heading&#34;&gt;堆内存设置&lt;/h1&gt;
&lt;p&gt;Java 程序中，我们通常比较关注堆的使用情况，一般通过 &lt;code&gt;-Xmx&lt;/code&gt; 和 &lt;code&gt;-Xms&lt;/code&gt; 分别控制最大和最小可用堆内存大小。在容器环境中，如果不显式指定堆内存参数，老的 JVM 版本是无法感知容器的资源限制的。在新的 JDK 8u191 版本以后，我们已经可以享受到新版 JVM 对容器的良好支持，并且可以通过 &lt;code&gt;-XX:InitialRAMPercentage&lt;/code&gt; 和 &lt;code&gt;-XX:MaxRAMPercentage&lt;/code&gt; 控制堆内存启动时和最大可用内存百分比。考虑到堆外内存的使用，&lt;code&gt;-XX:MaxRAMPercentage&lt;/code&gt; 不宜设置过高，具体值可以根据自己应用的情况灵活设置。需要注意的是百分比需要包含一位小数，否则会报错。文末有 Dockerfile 可供参考。&lt;/p&gt;
&lt;h1 id=&#34;jmap--jvm-&#34;&gt;jmap 等 JVM 诊断工具无法正常使用&lt;/h1&gt;
&lt;p&gt;由于容器的特殊性，应用启动时的进程 ID 其实是 1, jmap/jstat/jstack 等诊断工具依赖底层的 &lt;code&gt;PTRACE_ATTACH&lt;/code&gt;, 而由于 docker 后期版本的安全加固原因，这种操作是不允许的。因此我们可以想办法让 JVM 应用不以 PID 1 运行即可，但又能正常接收来自容器的停止等信号，这就是 &lt;a href=&#34;https://github.com/krallin/tini&#34;&gt;krallin/tini&lt;/a&gt; 的用武之地了！&lt;/p&gt;
&lt;h1 id=&#34;cpu-&#34;&gt;CPU 核数&lt;/h1&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/billryan/devops/blob/master/docker/jdk/Dockerfile&#34;&gt;devops/Dockerfile&lt;/a&gt; 是我自用的 JDK 的基础镜像(基于 Alpine, JDK 8u191) 包含阿里的 &lt;a href=&#34;https://alibaba.github.io/arthas/&#34;&gt;Arthas&lt;/a&gt; 诊断利器，已设置时区为东八区。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>神策 Kafka 0.8.2 Mirror Maker 优化</title>
      <link>https://blog.yuanbin.me/posts/2019-03/2019-03-14_09-47-39/</link>
      <pubDate>Thu, 14 Mar 2019 09:47:40 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2019-03/2019-03-14_09-47-39/</guid>
      
        <description>&lt;p&gt;由于历史原因，我们采购的神策所用的 Kafka 是老版本 0.8.2, 其所有的项目均在同一 topic 中，所以在构建我们的实时数据管道的过程中，我们需要对原有神策 Kafka 做如下两点改造：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将属于我们的项目的数据单独过滤出来，通过原始的 &lt;code&gt;kafka-mirror-maker&lt;/code&gt; 只能做到 topic 级别的复制&lt;/li&gt;
&lt;li&gt;镜像到我们自建的 Kafka 数据管道时，尽可能保证事件有序，尤其是对同一用户的行为事件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个问题，在新版 Kafka, 如 1.0 之后的版本中，我们可以实现 &lt;code&gt;kafka-mirror-maker&lt;/code&gt; 的接口进行加载定制，无需对原有 Kafka 源码进行变动。但是在 0.8.2 这个老版本还是做不到，故需要对源码中有关 &lt;code&gt;kafka-mirror-maker&lt;/code&gt; 进行改造。第二个问题，Kafka 只能保证分区内有序，无法做到全局有序的，但是我们如果能将神策行为事件中的用户 ID 提取作为 key, 属于同一用户的行为事件自然就在同一 partition 中了。&lt;/p&gt;
&lt;p&gt;改动过的源码见 &lt;a href=&#34;https://github.com/billryan/kafka-mirror-maker/commit/85b2dabc7fa2050aaaf1afea64a1e64ccd79be8e&#34;&gt;MirrorMaker&lt;/a&gt;, 相关的 Makefile 及 Dockerfile 也一并提供了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>为 Hugo even 主题移植 comment.js 评论插件</title>
      <link>https://blog.yuanbin.me/posts/2018-08/2018-08-19_16-59-31/</link>
      <pubDate>Sun, 19 Aug 2018 16:59:31 +0800</pubDate>
      
      <guid>https://blog.yuanbin.me/posts/2018-08/2018-08-19_16-59-31/</guid>
      
        <description>&lt;p&gt;在前文 &lt;a href=&#34;http://blog.yuanbin.me/posts/2018-02/2018-02-23_23-19-29/&#34;&gt;博客写作工作流&lt;/a&gt; 中我提到过一些关于博客评论系统的选择，简单来说就是弃用了 disqus, 选择了基于 GitHub issue 的评论方案，而由于 GitHub 之前 OAuth 鉴权粒度不够细，基于 gitalk/gitcoment 的方案会导致在博客当前页面评论登陆 GitHub 时提示的权限有点多，比如读写权限。新的基于 GitHub App 的方案如 &lt;a href=&#34;https://github.com/utterance/utterances/pull/25&#34;&gt;utterances 1.0&lt;/a&gt; 就会好很多了。但这种方式对于非知名公司/个人博主来讲，我是不敢随便去让这种 app 接入的。基于同样的理念，我找到了 wzpan 的 &lt;a href=&#34;https://github.com/wzpan/comment.js&#34;&gt;wzpan/comment.js&lt;/a&gt; &lt;a href=&#34;http://www.hahack.com/codes/comment-js/&#34;&gt;中文文档&lt;/a&gt;, 这种方案将鉴权完全转移至 GitHub 上控制，安全感会好很多。稍显麻烦的是会有一个跳转而不是直接在本页评论。下面我详细介绍一下 Hugo even 下的如何使用 comment.js&lt;/p&gt;
&lt;p&gt;由于目前还未向 even 发起 PR, 所以现在想使用的话可以直接使用我 fork 改过的 ==&amp;gt; &lt;a href=&#34;https://github.com/billryan/hugo-theme-even&#34;&gt;billryan/hugo-theme-even&lt;/a&gt;, 具体配置同 comment.js 要求，你可以参考我的 &lt;a href=&#34;https://github.com/billryan/blog/blob/master/config.toml&#34;&gt;blog/config.toml&lt;/a&gt;, 主要是一些如 owner, repo, token 的设置。对 comment.js 有需求的可以留言，我可以尝试向 even 发起一个 PR 合并到官方去。&lt;/p&gt;
&lt;p&gt;核心配置如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  [params.comment]           # comment is a comment system based on GitHub issues. see https://github.com/gitalk/gitalk
    owner = &amp;quot;billryan&amp;quot;              # Your GitHub ID
    repo = &amp;quot;blog&amp;quot;               # The repo to store comments
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看完 comment.js 的文档后移植起来其实是非常简单的，在这个过程中我还参考了 &lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even/pull/51&#34;&gt;feat: add gitalk&lt;/a&gt;, 加入了一些公开的 CDN 资源，在 comment.js 的基础上增加了 &lt;code&gt;.btn&lt;/code&gt; 的样式，这个样式参考了 GitHub issue. 另外我默认开启了 highlight 和 spin 这两个特性。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
